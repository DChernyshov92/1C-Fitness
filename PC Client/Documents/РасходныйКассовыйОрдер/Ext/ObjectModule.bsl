 Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровИУслуг") Тогда
		// Заполнение шапки
		Договор = ДанныеЗаполнения.Договор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ДенежныеСредства Приход
	Движения.ДенежныеСредства.Записывать = Истина;
	Движение = Движения.ДенежныеСредства.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Касса = Касса;
	Движение.Сумма = СуммаДокумента;
	
	//БухгалтерскиеПроводки
	АналитикаПроводки = ПолучитьАналитикуПроводки();
	Движения.Хозрасчётный.Записывать = Истина;
	Движение = Движения.Хозрасчётный.Добавить();
	Движение.СчетДт = АналитикаПроводки.СчетДебета;
	Движение.СчетКт = АналитикаПроводки.СчетКредита;
	Движение.Период = Дата;
	Движение.Сумма = СуммаДокумента;
	Движение.Содержание = АналитикаПроводки.СодержаниеОперации;
	БухгалтерскийУчёт.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, АналитикаПроводки.СубконтоДебет);
	БухгалтерскийУчёт.ЗаполнитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, АналитикаПроводки.СубконтоКредит);
	Движения.Записать();
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Функция ПолучитьАналитикуПроводки()    
    ОплатаПоставщику = Перечисления.ВидыОперацийРасходаДенег.ОплатаПоставщику;
    ВозвратДенегПокупателю = Перечисления.ВидыОперацийРасходаДенег.ВозвратПокупателю;
    ВыдачаДенегПодотчетнику = Перечисления.ВидыОперацийРасходаДенег.ВыдачаПодотчётнику;
    ВыдачаЗаработнойплаты = Перечисления.ВидыОперацийРасходаДенег.ВыдачаЗаработнойплаты;    
        
    СтруктураАналитики = Новый Структура;
    СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчётный.Касса);
    СтруктураАналитики.Вставить("СубконтоКредит", Касса);

    Если ВидОперации = ОплатаПоставщику Тогда
        СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчётный.РасчетыСПоставщиками);
        СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Оплата поставщику наличными из кассы");
    ИначеЕсли ВидОперации = ВозвратДенегПокупателю Тогда
        СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчётный.РасчетыСПокупателями);    
        СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Возврат покупателю наличными из кассы");
    ИначеЕсли ВидОперации = ВыдачаДенегПодотчетнику Тогда
        СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчётный.РасчетыСПодотчетнымиЛицами);
        СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Выдача денежных средств подотчетному лицу");
    ИначеЕсли ВидОперации = ВыдачаЗаработнойплаты Тогда 
        СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчётный.РасчетыСПерсоналомПоОплатеТруда);
        СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Выплата заработной платы наличными из кассы");
    КонецЕсли;
    Возврат СтруктураАналитики;
КонецФункции
