 Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Реализация") Тогда
		// Заполнение шапки
		Договор = ДанныеЗаполнения.Договор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ДенежныеСредства Приход
	Движения.ДенежныеСредства.Записывать = Истина;
	Движение = Движения.ДенежныеСредства.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Касса = Касса;
	Движение.Сумма = СуммаДокумента;
	
	АналитикаПроводки = ПолучитьАналитикуПроводки();
	// регистр Хозрасчётный 
	Движения.Хозрасчётный.Записывать = Истина;      
	Движение = Движения.Хозрасчётный.Добавить();
	Движение.СчетДт = АналитикаПроводки.СчетДебета;
	Движение.СчетКт = АналитикаПроводки.СчетКредита;
	Движение.Период = Дата;
	Движение.Сумма = СуммаДокумента;
	Движение.Содержание = АналитикаПроводки.СодержаниеОперации;
	БухгалтерскийУчёт.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, АналитикаПроводки.СубконтоДебет);
	БухгалтерскийУчёт.ЗаполнитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, АналитикаПроводки.СубконтоКредит);

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Функция ПолучитьАналитикуПроводки()    
    ОплатаОтПокупателя = Перечисления.ВидыОперацийПоступленияДенег.ОплатаОтПокупателя;
    ВозвратОтПоставщика = Перечисления.ВидыОперацийПоступленияДенег.ВозвратОтПоставщика;
    ВозвратОтПодотчетника = Перечисления.ВидыОперацийПоступленияДенег.ВозвратОтПодотчётника;    
	
    СтруктураАналитики = Новый Структура;
    СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчётный.Касса);
    СтруктураАналитики.Вставить("СубконтоДебет", Касса);
    Если ВидОперации = ОплатаОтПокупателя Тогда
		СтруктураАналитики.Вставить("СодержаниеОперации", "Оплата от покупателя наличными в кассу");
        СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчётный.РасчетыСПокупателями);
        СтруктураАналитики.Вставить("СубконтоКредит", Плательщик);
    ИначеЕсли ВидОперации = ВозвратОтПоставщика Тогда
        СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчётный.РасчетыСПоставщиками);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Возврат от поставщика наличными в кассу");
        СтруктураАналитики.Вставить("СубконтоКредит", Плательщик);
    ИначеЕсли ВидОперации = ВозвратОтПодотчетника Тогда 
        СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчётный.РасчетыСПодотчетнымиЛицами);
        СтруктураАналитики.Вставить("СодержаниеОперации", "Возврат подотчетных средств"); 
        СтруктураАналитики.Вставить("СубконтоКредит", Плательщик);
    КонецЕсли;    
    Возврат СтруктураАналитики;
КонецФункции
